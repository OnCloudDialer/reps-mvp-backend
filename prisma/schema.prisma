// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                  String                @id @default(uuid())
  name                String
  createdAt           DateTime              @default(now())
  OrganizationMembers OrganizationMembers[]
  Store               Store[]
  Contact             Contact[]
  Tag                 Tag[]
  AreaTag             AreaTag[]
  Product             Product[]
  Visit               Visit[]
}

model OrganizationMembers {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  role           UserRole
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
}

model User {
  id                  String                @id @default(uuid())
  email               String                @unique
  password            String
  name                String
  createdAt           DateTime              @default(now())
  Store               Store[]
  OrganizationMembers OrganizationMembers[]
  Contact             Contact[]
  Tag                 Tag[]
  AreaTag             AreaTag[]
  Product             Product[]
  Visit               Visit[]
}

model Store {
  id             String         @id @default(uuid())
  name           String
  address        String
  region         String
  city           String
  latitude       Float
  longitude      Float
  tags           StoreTag[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  StoreContact   StoreContact[]
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  User           User?          @relation(fields: [userId], references: [id])
  userId         String?
  StoreNotes     StoreNotes[]
  StoreAreaTag   StoreAreaTag[]
  Visit          Visit[]
}

model StoreContact {
  id        String  @id @default(uuid())
  store     Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId   String
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId String
  Tag       Tag?    @relation(fields: [tagId], references: [id])
  tagId     String?
}

model Contact {
  id             String         @id @default(uuid())
  name           String
  phone          String
  email          String
  profilePicture String?
  role           ContactRole
  StoreContact   StoreContact[]
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  User           User?          @relation(fields: [userId], references: [id])
  userId         String?
  ContactNotes   ContactNotes[]
  Visit          Visit[]
}

model ContactNotes {
  id        String  @id @default(uuid())
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId String
  note      Notes   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId    String
}

model StoreNotes {
  id      String @id @default(uuid())
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId String
  note    Notes  @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId  String
}

model Notes {
  id           String         @id @default(uuid())
  content      String         @db.LongText()
  type         NoteType
  createdAt    DateTime       @default(now())
  ContactNotes ContactNotes[]
  StoreNotes   StoreNotes[]
}

model Tag {
  id             String         @id @default(uuid())
  name           String         @unique
  stores         StoreTag[]
  StoreContact   StoreContact[]
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  User           User?          @relation(fields: [userId], references: [id])
  userId         String?
}

model Product {
  id              String        @id @default(uuid())
  name            String
  description     String?       @db.Text
  default_price   Int           @db.Int
  unit_of_measure UnitOfMeasure @default(UNIT)
  regular_price   Int           @db.Int
  special_price   Int?          @db.Int
  imageUrls       ImageUrl[]
  announcements   String?       @db.Text
  shareable_info  String?       @db.Text
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  organization    Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId  String
  User            User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String?
}

model ImageUrl {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model StoreTag {
  id      String @id @default(uuid())
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId String
  tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId   String
}

model AreaTag {
  id             String         @id @default(uuid())
  name           String         @unique
  coords         Json
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  User           User?          @relation(fields: [userId], references: [id])
  userId         String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  StoreAreaTag   StoreAreaTag[]
}

model StoreAreaTag {
  id        String  @id @default(uuid())
  store     Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId   String
  areaTag   AreaTag @relation(fields: [areaTagId], references: [id], onDelete: Cascade)
  areaTagId String
}

model Visit {
  id             String          @id @default(uuid())
  store          Store           @relation(fields: [storeId], references: [id])
  storeId        String
  contact        Contact?        @relation(fields: [contactId], references: [id])
  contactId      String?
  scheduledAt    DateTime?
  startedAt      DateTime?
  endedAt        DateTime?
  visitType      VisitType       @default(SALES)
  notes          VisitNote[]
  photos         VisitPhoto[]
  activities     VisitActivity[]
  followUpDate   DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  User           User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?
}

model VisitNote {
  id        String   @id @default(uuid())
  visit     Visit    @relation(fields: [visitId], references: [id])
  visitId   String
  content   String
  createdAt DateTime @default(now())
}

model VisitPhoto {
  id          String   @id @default(uuid())
  visit       Visit    @relation(fields: [visitId], references: [id])
  visitId     String
  imageUrl    String
  description String?
  createdAt   DateTime @default(now())
}

model VisitActivity {
  id        String       @id @default(uuid())
  visit     Visit        @relation(fields: [visitId], references: [id])
  visitId   String
  type      ActivityType
  details   String?
  createdAt DateTime     @default(now())
}

model Incentive {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
}

enum ContactRole {
  STORE_MANAGER
  FLOOR_MANAGER
  OTHER
  BUYER
  OWNER
}

enum NoteType {
  STORE_NOTE
  CONTACT_NOTE
  VISIT_NOTE
  PHOTO_NOTE
}

enum UserRole {
  ORGANIZATION_OWNER
  MEMBER
}

enum UnitOfMeasure {
  PIECE
  BOX
  CASE
  PACK
  BOTTLE
  LITER
  GALLON
  KILOGRAM
  GRAM
  POUND
  OUNCE
  TUB
  BAG
  JAR
  TRAY
  PALLET
  ROLL
  DOZEN
  UNIT
}

enum ActivityType {
  CHECK_PRODUCTS
  DISCUSS_PROMOTIONS
  PLACE_ORDER
  SCHEDULE_FOLLOW_UP
  ADD_CONTACT_INFO
  OTHER
}

enum VisitType {
  SALES
  AUDIT
  SUPPORT
  MERCHANDISING
  OTHER
}
